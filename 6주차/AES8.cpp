
// #include "GF256.h"
#include <stdio.h>
typedef unsigned char byte;

// 헤더 함수들 ========================================
byte GF256_add(byte a, byte b) {
    return a ^ b;
}
byte GF256_xtime_simple(byte a){
  return (((a >> 7) & 0x01) == 0) ? (a << 1) : ((a << 1) ^ 0x1b);
}
byte GF256_mul(byte f, byte g) {
  byte h; // 곱셈 결과 저장
  int coef; // 계수

  h = 0x00; // 초기값 h(x) = 0
  for (int i = 7; i >= 0; i--) { // a7, a6, a5, ... ,a1, a0 순서로
      coef = (f >> i) & 0x01; // a7, a6, a5, ... ,a1, a0
      // h = GF256_xtime(h);
      h = GF256_xtime_simple(h);
      if (coef == 1) { // 계수 ai가 1인 경우만 g(x)를 h(x)에 더한다 (+ 아님. xor)
          h = GF256_add(h, g);
      }
  }

  return h;
}

byte Sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

byte ISbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};


void MixCol (byte in[4], byte out[4]) {
    byte MC[4][4] = {
        {0x02, 0x03, 0x01, 0x01},
        {0x01, 0x02, 0x03, 0x01},
        {0x01, 0x01, 0x02, 0x03},
        {0x03, 0x01, 0x01, 0x02}
    };
    byte temp;

    for (int i = 0; i < 4; i++) {
        out[i] = 0;
        for (int j = 0; j < 4; j++) {
          // out[i] = out[i] + MC[i][j] * in[j]
            temp = GF256_mul(MC[i][j], in[j]);
            out[i] = GF256_add(out[i], temp);
        }
    }
    // print_MC_matrix(MC, "MC");
    // print_MC_matrix(MC);
}

void InvMixCol(byte in[4], byte out[4]) {
    byte InvMC[4][4] = {
        {0x0e, 0x0b, 0x0d, 0x09},
        {0x09, 0x0e, 0x0b, 0x0d},
        {0x0d, 0x09, 0x0e, 0x0b},
        {0x0b, 0x0d, 0x09, 0x0e} };

    byte temp;

    for (int i = 0; i < 4; i++) {
        out[i] = 0;
        for (int j = 0; j < 4; j++) {
            //out[i] = out[i] + MC[i][j] * in[j];
            temp = GF256_mul(InvMC[i][j], in[j]);
            out[i] = out[i] ^ temp;
        }
        // out[i] ^= GF256_mul(InvMC[i][j], in[j]);
    }
}


void SubBytes(byte state[16]) {
    for (int i = 0; i < 16; i++) state[i] = Sbox[state[i]];
}
void InvSubBytes(byte state[16]) {
    for (int i = 0; i < 16; i++) state[i] = ISbox[state[i]];
}


/*
0   4   8   12        0   4   8   12
1   5   9   13        5   9   13  1
2   6   10  14   ->   10  14  2   6
3   7   11  15        15  3   7   11
*/

void ShiftRows(byte state[16]) {
    byte temp;

    temp = state[1];
    state[1] = state[5]; 
    state[5] = state[9]; 
    state[9] = state[13]; 
    state[13] = temp;

    temp = state[2];
    state[2] = state[10]; 
    state[10] = temp;

    temp = state[6];
    state[6] = state[14]; 
    state[14] = temp;

    temp = state[3];
    state[3] = state[15]; 
    state[15] = state[11]; 
    state[11] = state[7]; 
    state[7] = temp;
}

/*
0   4   8   12        0   4   8   12
1   5   9   13        5   9   13  1
2   6   10  14   <-   10  14  2   6
3   7   11  15        15  3   7   11
*/

void InvShiftRows(byte state[16]) {
    byte temp;

    temp = state[1];
    state[1] = state[13]; state[13] = state[9];
    state[9] = state[5]; state[5] = temp;

    temp = state[2];
    state[2] = state[10]; state[10] = temp;

    temp = state[6];
    state[6] = state[14]; state[14] = temp;

    temp = state[3];
    state[3] = state[7]; state[7] = state[11];
    state[11] = state[15]; state[15] = temp;
}

void MixColumns(byte state[16]) {
    byte in[4], out[4];
    for (int col = 0; col < 4; col++) {
        for (int i = 0; i < 4; i++) in[i] = state[4 * col + i];
        MixCol(in, out);
        for (int i = 0; i < 4; i++) state[4 * col + i] = out[i];
    }
}

void InvMixColumns(byte state[16]) {
    byte in[4], out[4];
    for (int col = 0; col < 4; col++) {
        for (int i = 0; i < 4; i++) in[i] = state[4 * col + i];
        InvMixCol(in, out);
        for (int i = 0; i < 4; i++) state[4 * col + i] = out[i];
    }
}

void AddRoundKey(byte state[16], byte RK[16]) {
    for (int i = 0; i < 16; i++) state[i] ^= RK[i];
}

void AES8_Encrypt(byte pt[16], byte rk[11][16], byte ct[16]) {
    byte state[16];

    // Initialize state with plaintext
    for (int i = 0; i < 16; i++) state[i] = pt[i];

    // Initial round key addition
    AddRoundKey(state, rk[0]);

    // Main rounds (9 rounds in AES-128)
    for (int r = 1; r <= 9; r++) {
        SubBytes(state);
        ShiftRows(state);
        MixColumns(state);
        AddRoundKey(state, rk[r]);
    }

    // Final round (without MixColumns)
    SubBytes(state);
    ShiftRows(state);
    AddRoundKey(state, rk[10]);

    // Copy the state to the ciphertext output
    for (int i = 0; i < 16; i++) ct[i] = state[i];
}

void AES8_Decrypt(byte ct[16], byte rk[11][16], byte pt[16]) {
    byte state[16];

    // Initialize state with ciphertext
    for (int i = 0; i < 16; i++) state[i] = ct[i];

    // Initial round key addition
    AddRoundKey(state, rk[10]);

    // Main rounds (9 rounds in AES-128)
    for (int r = 9; r >= 1; r--) {
        InvShiftRows(state);
        InvSubBytes(state);
        AddRoundKey(state, rk[r]);
        InvMixColumns(state);
    }

    // Final round (without MixColumns)
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(state, rk[0]);

    // Copy the state to the plaintext output
    for (int i = 0; i < 16; i++) pt[i] = state[i];
}

// eqDecryption 할 때 11개의 라운드 키 중 맨앞,맨뒤 제거하고 9개만 사용
// 그리고 그 9개의 라운드 키를 inverse으로 변환
void AES8_EqInvKey(byte rk[11][16], byte eqrk[11][16]) {
    // 역키(eqrk)를 원래 라운드 키(rk)로부터 계산
    for (int r = 0; r < 11; r++) {
        for (int i = 0; i < 16; i++) {
            eqrk[r][i] = rk[r][i];  // 원래 라운드 키 값을 eqrk에 복사
        }
    }

    // 1~9 라운드에 대해 역 MixColumns 적용
    for (int r = 1; r <= 9; r++) {
        InvMixColumns(eqrk[r]);  // 역 MixColumns 변환을 각 eqrk에 적용
    }
}

// eqDecryption 은 Encryption과 동일한 과정을 거치되, 라운드 키를 역순으로 적용
void AES8_EqDecrypt(byte ct[16], byte eqrk[11][16], byte pt[16]) {
    byte state[16];

    // 초기 상태를 암호문으로 설정
    for (int i = 0; i < 16; i++) state[i] = ct[i];

    // 첫 번째 라운드의 라운드 키 추가
    AddRoundKey(state, eqrk[10]);

    // 9 라운드에 대해 역변환 수행
    for (int r = 9; r >= 1; r--) {
        InvSubBytes(state);
        InvShiftRows(state);
        InvMixColumns(state);
        AddRoundKey(state, eqrk[r]);
    }

    // 마지막 라운드 (InvMixColumns 제외)
    InvSubBytes(state);
    InvShiftRows(state);
    AddRoundKey(state, eqrk[0]);

    // 복호화 결과를 평문으로 복사
    for (int i = 0; i < 16; i++) pt[i] = state[i];
}

void print_AES_state(byte state[16], const char *pTitle = NULL) {
    if (pTitle != NULL) printf("%s = ", pTitle);
    for (int i = 0; i < 16; i++) {
        printf("%02x ", state[i]);
        if ((i % 4) == 3) printf("");
    }
    printf("\n");
}

void test_AES8() {

  byte pt[16] = {
    0x00, 0x11, 0x22, 0x33,
    0x44, 0x55, 0x66, 0x77,
    0x88, 0x99, 0xaa, 0xbb,
    0xcc, 0xdd, 0xee, 0xff
  };
  byte rk[11][16] = {
    {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
    {0xd6, 0xaa, 0x74, 0xfd, 0xd2, 0xaf, 0x72, 0xfa, 
    0xda, 0xa6, 0x78, 0xf1, 0xd6, 0xab, 0x76, 0xfe},
    {0xb6, 0x92, 0xcf, 0x0b, 0x64, 0x3d, 0xbd, 0xf1, 
    0xbe, 0x9b, 0xc5, 0x00, 0x68, 0x30, 0xb3, 0xfe},
    { 0xb6, 0xff, 0x74, 0x4e, 0xd2, 0xc2, 0xc9, 0xbf,
    0x6c, 0x59, 0x0c, 0xbf, 0x04, 0x69, 0xbf, 0x41 },
    { 0x47, 0xf7, 0xf7, 0xbc, 0x95, 0x35, 0x3e, 0x03,
    0xf9, 0x6c, 0x32, 0xbc, 0xfd, 0x05, 0x8d, 0xfd },
    { 0x3c, 0xaa, 0xa3, 0xe8, 0xa9, 0x9f, 0x9d, 0xeb,
      0x50, 0xf3, 0xaf, 0x57, 0xad, 0xf6, 0x22, 0xaa },
    { 0x5e, 0x39, 0x0f, 0x7d, 0xf7, 0xa6, 0x92, 0x96,
      0xa7, 0x55, 0x3d, 0xc1, 0x0a, 0xa3, 0x1f, 0x6b },
    { 0x14, 0xf9, 0x70, 0x1a, 0xe3, 0x5f, 0xe2, 0x8c,
      0x44, 0x0a, 0xdf, 0x4d, 0x4e, 0xa9, 0xc0, 0x26 },
    { 0x47, 0x43, 0x87, 0x35, 0xa4, 0x1c, 0x65, 0xb9,
      0xe0, 0x16, 0xba, 0xf4, 0xae, 0xbf, 0x7a, 0xd2 },
    { 0x54, 0x99, 0x32, 0xd1, 0xf0, 0x85, 0x57, 0x68,
      0x10, 0x93, 0xed, 0x9c, 0xbe, 0x2c, 0x97, 0x4e },
    { 0x13 , 0x11, 0x1d, 0x7f, 0xe3, 0x94, 0x4a, 0x17, 
    0xf3, 0x07, 0xa7, 0x8b, 0x4d, 0x2b, 0x30, 0xc5}
  };
  
  // ciphertext = "69c4e0d86a7b0430d8cdb78070b4c55a"
  byte correct_ct[16] = { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
                          0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a };

  byte ct[16];

  AES8_Encrypt(pt, rk, ct);
  print_AES_state(ct, "CT");
  printf("Correct CT = ");
  for (int i = 0; i < 16; i++) {
      printf("%02x ", correct_ct[i]);
  }

  byte decrypted[16];
  AES8_Decrypt(ct, rk, decrypted);
  print_AES_state(decrypted, "decrypted");
  printf("Correct PT = ");
  for (int i = 0; i < 16; i++) {
    printf("%02x ", pt[i]);
  }
  printf("\n");

    byte eq_decrypted[16];
    byte eqrk[11][16];

    AES8_EqInvKey(rk, eqrk);
    AES8_EqDecrypt(ct, eqrk, eq_decrypted);
    print_AES_state(eq_decrypted, "eq_decrypted");

    

  printf("\n");
}



int main() {
    test_AES8();
    return 0;
}